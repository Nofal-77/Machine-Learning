QUESTION NUM 1:

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

# Load and clean the dataset
df = pd.read_csv("/mnt/data/lab_vehicle.csv")
df.columns = df.columns.str.replace("'", "").str.strip()  # Clean column names

# Normalize the data
scaler = StandardScaler()
X = scaler.fit_transform(df)

# K-Means implementation
def k_means(X, k, max_iters=100):
    # Randomly initialize centroids
    np.random.seed(42)
    centroids = X[np.random.choice(range(X.shape[0]), k, replace=False)]

    for _ in range(max_iters):
        # Assign clusters
        distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)
        labels = np.argmin(distances, axis=1)

        # Compute new centroids
        new_centroids = np.array([X[labels == i].mean(axis=0) for i in range(k)])
        
        # Check for convergence
        if np.allclose(centroids, new_centroids):
            break
        centroids = new_centroids

    return labels, centroids

# Run k-means clustering
k = 3  # You can adjust the number of clusters
labels, centroids = k_means(X, k)

# Reduce to 2D using PCA for visualization
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X)

# Plot the results
plt.figure(figsize=(8, 6))
for i in range(k):
    plt.scatter(X_pca[labels == i, 0], X_pca[labels == i, 1], label=f'Cluster {i}')
plt.title('K-Means Clustering Visualization')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.legend()
plt.grid(True)
plt.show()



QUESTION NUM 2:

For K = 3
Silhouette Score: 0.292 (values closer to 1 indicate better-defined clusters)



QUESTION NUM 3:

Re-implementation of Q.1 on dataset of my choice
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.metrics import confusion_matrix, accuracy_score

# Load dataset
df = pd.read_csv("diabetes1.csv")

# Drop the target column for clustering
X = df.drop(columns=["target"]).values
true_labels = df["target"].values

# Standardize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# K-Means from scratch
def kmeans(X, k=2, max_iters=100):
    np.random.seed(42)
    centroids = X[np.random.choice(range(len(X)), k, replace=False)]
    for _ in range(max_iters):
        distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)
        clusters = np.argmin(distances, axis=1)
        new_centroids = np.array([X[clusters == i].mean(axis=0) for i in range(k)])
        if np.allclose(centroids, new_centroids):
            break
        centroids = new_centroids
    return clusters, centroids

# Run K-Means
clusters, centroids = kmeans(X_scaled, k=2)

# Reduce dimensions for visualization
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)
centroids_pca = pca.transform(centroids)

# Plot clusters
plt.figure(figsize=(8, 6))
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=clusters, cmap='viridis', alpha=0.6, label='Data Points')
plt.scatter(centroids_pca[:, 0], centroids_pca[:, 1], c='red', marker='X', s=200, label='Centroids')
plt.title('K-Means Clustering (2D PCA Projection)')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.legend()
plt.grid(True)
plt.show()

# Evaluate clustering against true labels
accuracy_original = accuracy_score(true_labels, clusters)
accuracy_flipped = accuracy_score(true_labels, 1 - clusters)

if accuracy_flipped > accuracy_original:
    clusters = 1 - clusters
    accuracy = accuracy_flipped
else:
    accuracy = accuracy_original

# Confusion matrix
cm = confusion_matrix(true_labels, clusters)

plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=["Non-Diabetic", "Diabetic"],
            yticklabels=["Non-Diabetic", "Diabetic"])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title(f'Confusion Matrix (Accuracy: {accuracy:.2f})')
plt.show()


